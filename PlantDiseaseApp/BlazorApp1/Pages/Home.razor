@page "/"
@using PlantDiseasePOJOS
@using Microsoft.AspNetCore.Components.Forms
@inject HttpClient Http

<div class="container my-5">
    <h3 class="mb-4 text-center">Plant Disease Detection Using  LLMs</h3>

    <EditForm Model="@input" OnValidSubmit="analyze">
        <DataAnnotationsValidator />
        <ValidationSummary />

        <InputText @bind-Value="input.Foldername" placeholder="Your Name" class="form-control mb-2" />
        <InputFile OnChange="OnFileSelected" class="form-control mb-2" />
        @if (previewUrl is not null)
        {
            <img src="@previewUrl" class="mt-2 img-fluid rounded shadow" style="max-width:200px;" />
        }


        <button type="submit" class="btn btn-primary w-100">Analyze</button>
    </EditForm>

    @if (result is not null)
    {
        <div class="mt-4">
            @foreach (var analysis in result.PlantAnalysis)
            {
                <div class="card mb-3 shadow-sm">
                    <div class="card-body">
                        <h5 class="card-title">@analysis.PlantName (@analysis.ScientificPlantName)</h5>
                        <p class="card-text"><strong>Status:</strong> @analysis.Status (@analysis.DetectionConfidencePercent%
                            confidence)</p>
                        <p class="card-text"><strong>Disease:</strong> @analysis.DiseaseName
                            (@analysis.DiseaseConfidencePercent% confidence)</p>
                        <p class="card-text"><strong>Observation:</strong> @analysis.PrimaryObservation</p>
                        <p class="card-text"><strong>Severity:</strong> @analysis.Severity</p>
                        <p class="card-text"><strong>Spread Risk:</strong> @analysis.SpreadRisk</p>
                        <p class="card-text"><strong>Short Term:</strong> @analysis.RecommendedShortTermAction</p>
                        <p class="card-text"><strong>Long Term:</strong> @analysis.RecommendedLongTermAction</p>
                    </div>
                </div>
            }
        </div>
    }
</div>

@code {
    private InputPOJO input = new();
    private IBrowserFile? selectedFile;
    private OutputPOJO? result;
    private string? previewUrl;

    private async Task analyze()
    {
        if (selectedFile is null || string.IsNullOrWhiteSpace(input.Foldername))
            return;

        var content = new MultipartFormDataContent();

        // add folder name
        content.Add(new StringContent(input.Foldername), "Foldername");

        // add file
        var streamContent = new StreamContent(selectedFile.OpenReadStream(10 * 1024 * 1024)); // 10 MB limit
        content.Add(streamContent, "File", selectedFile.Name);

        var response = await Http.PostAsync("http://localhost:5172/api/analyze", content);


        if (response.IsSuccessStatusCode)
        {
            result = await response.Content.ReadFromJsonAsync<OutputPOJO>();
        }
        else
        {
            result = null;
        }
    }

    private async void OnFileSelected(InputFileChangeEventArgs e)
    {
        selectedFile = e.File;
        input.Filename = selectedFile.Name;

        using var stream = selectedFile.OpenReadStream(10 * 1024 * 1024);
        var buffer = new byte[selectedFile.Size];
        await stream.ReadAsync(buffer);
        previewUrl = $"data:{selectedFile.ContentType};base64,{Convert.ToBase64String(buffer)}";
    }
}
